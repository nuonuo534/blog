(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{164:function(a,r,t){"use strict";t.r(r);var e=t(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"performance、lighthouse-与性能-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#performance、lighthouse-与性能-api","aria-hidden":"true"}},[a._v("#")]),a._v(" Performance、LightHouse 与性能 API")]),a._v(" "),t("p",[a._v("性能监测方案主要有两种："),t("strong",[a._v("可视化方案、可编程方案")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"可视化监测：-performance面板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可视化监测：-performance面板","aria-hidden":"true"}},[a._v("#")]),a._v(" 可视化监测： Performance面板")]),a._v(" "),t("h3",{attrs:{id:"开始记录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开始记录","aria-hidden":"true"}},[a._v("#")]),a._v(" 开始记录")]),a._v(" "),t("p",[a._v("右键打开开发者工具，选中我们的 Performance 面板：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/7/1664d6a13652f0db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),a._v(" "),t("p",[a._v("当我们选中图中所标示的实心圆按钮，Performance 会开始帮我们记录我们后续的交互操作；当我们选中圆箭头按钮，Performance 会将页面重新加载，计算加载过程中的性能表现。 tips：使用 Performance 工具时，为了规避其它 Chrome 插件对页面的性能影响，我们最好在无痕模式下打开页面：")]),a._v(" "),t("h3",{attrs:{id:"简要分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简要分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 简要分析")]),a._v(" "),t("p",[a._v("这里我打开掘金首页，选中 Performance 面板中的圆箭头，来看一下页面加载过程中的性能表现：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/7/1664d714642f4dcb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),a._v(" "),t("p",[a._v("从上到下，依次为概述面板、详情面板。下我们先来观察一下概述面板，了解页面的基本表现：")]),a._v(" "),t("p",[a._v("我们看右上角的三个栏目：FPS、CPU 和 NET。")]),a._v(" "),t("p",[t("strong",[a._v("FPS")]),a._v("：这是一个和动画性能密切相关的指标，它表示每一秒的帧数。图中绿色柱状越高表示帧率越高，体验就越流畅。若出现红色块，则代表长时间帧，很可能会出现卡顿。图中以绿色为主，偶尔出现红块，说明网页性能并不糟糕，但仍有可优化的空间。")]),a._v(" "),t("p",[t("strong",[a._v("CPU")]),a._v("：表示CPU的使用情况，不同的颜色片段代表着消耗CPU资源的不同事件类型。这部分的图像和下文详情面板中的Summary内容有对应关系，我们可以结合这两者挖掘性能瓶颈。")]),a._v(" "),t("p",[t("strong",[a._v("NET")]),a._v("：粗略的展示了各请求的耗时与前后顺序。这个指标一般来说帮助不大。")]),a._v(" "),t("h3",{attrs:{id:"挖掘性能瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#挖掘性能瓶颈","aria-hidden":"true"}},[a._v("#")]),a._v(" 挖掘性能瓶颈")]),a._v(" "),t("p",[a._v("详情面板中的内容有很多。但一般来说，我们会主要去看 Main 栏目下的火焰图和 Summary 提供给我们的饼图——这两者和概述面板中的 CPU 一栏结合，可以帮我们迅速定位性能瓶颈（如下图）。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/7/1664d9d24ee5bd4e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),a._v(" "),t("p",[a._v("先看 CPU 图表和 Summary 饼图。CPU 图表中，我们可以根据颜色填充的饱满程度，确定 CPU 的忙闲，进而了解该页面的总的任务量。而 Summary 饼图则以一种直观的方式告诉了我们，哪个类型的任务最耗时（从本例来看是脚本执行过程）。这样我们在优化的时候，就可以抓到“主要矛盾”，进而有的放矢地开展后续的工作了。")]),a._v(" "),t("p",[a._v("再看 Main 提供给我们的火焰图。这个火焰图非常关键，它展示了整个运行时主进程所做的每一件事情（包括加载、脚本运行、渲染、布局、绘制等）。x 轴表示随时间的记录。每个长条就代表一个活动。更宽的条形意味着事件需要更长时间。y 轴表示调用堆栈，我们可以看到事件是相互堆叠的，上层的事件触发了下层的事件。")]),a._v(" "),t("p",[a._v("CPU 图标和 Summary 图都是按照“类型”给我们提供性能信息，而 Main 火焰图则将粒度细化到了每一个函数的调用。到底是从哪个过程开始出问题、是哪个函数拖了后腿、又是哪个事件触发了这个函数，这些具体的、细致的问题都将在 Main 火焰图中得到解答。")]),a._v(" "),t("h2",{attrs:{id:"lighthouse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lighthouse","aria-hidden":"true"}},[a._v("#")]),a._v(" LightHouse")]),a._v(" "),t("p",[a._v("Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。 你可以将其作为一个 Chrome 扩展程序运行，或从命令行运行。 为Lighthouse 提供一个需要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。")]),a._v(" "),t("p",[a._v("分别是页面性能、PWA（渐进式 Web 应用）、可访问性（无障碍）、最佳实践、SEO 五项指标的跑分。孰强孰弱，我们一看便知。")]),a._v(" "),t("p",[a._v("向下拉动 Report 页，我们还可以看到每一个指标的细化评估：")]),a._v(" "),t("p",[a._v("在“Opportunities”中，LightHouse 甚至针对我们的性能问题给出了可行的建议、以及每一项优化操作预期会帮我们节省的时间。这份报告的可操作性是很强的——我们只需要对着 LightHouse 给出的建议，一条一条地去尝试，就可以看到自己的页面，在一秒一秒地变快。")]),a._v(" "),t("p",[a._v("除了直接下载，我们还可以通过命令行使用 LightHouse：")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("npm install "),t("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("g lighthouse\nlighthouse https"),t("span",{attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{attrs:{class:"token operator"}},[a._v("/")]),t("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("juejin"),t("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("im"),t("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("books\n")])])]),t("h2",{attrs:{id:"w3c-性能-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#w3c-性能-api","aria-hidden":"true"}},[a._v("#")]),a._v(" W3C 性能 API")]),a._v(" "),t("h3",{attrs:{id:"访问-performance-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问-performance-对象","aria-hidden":"true"}},[a._v("#")]),a._v(" 访问 performance 对象")]),a._v(" "),t("p",[a._v("performance 是一个全局对象。我们在控制台里输入 window.performance，就可一窥其全貌")]),a._v(" "),t("h3",{attrs:{id:"关键时间节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关键时间节点","aria-hidden":"true"}},[a._v("#")]),a._v(" 关键时间节点")]),a._v(" "),t("p",[a._v("在 performance 的 timing 属性中，可以查看到如下的时间戳")])])}],!1,null,null,null);s.options.__file="Performance.md";r.default=s.exports}}]);