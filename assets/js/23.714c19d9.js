(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{180:function(t,a,e){"use strict";e.r(a);var s=e(0),o=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"本地存储——从-cookie-到-web-storage、indexdb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地存储——从-cookie-到-web-storage、indexdb","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地存储——从 Cookie 到 Web Storage、IndexDB")]),t._v(" "),e("h2",{attrs:{id:"从-cookie-说起"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从-cookie-说起","aria-hidden":"true"}},[t._v("#")]),t._v(" 从 Cookie 说起")]),t._v(" "),e("p",[t._v("Cookie 的本职工作并非本地存储，而是“维持状态”。")]),t._v(" "),e("p",[t._v("HTTP 协议是一个无状态协议，服务器接收客户端的请求，返回一个响应，故事到此就结束了，服务器并没有记录下关于客户端的任何信息。那么下次请求的时候，如何让服务器知道“我是我”呢？")]),t._v(" "),e("p",[t._v("在这样的背景下，Cookie 应运而生。")]),t._v(" "),e("p",[t._v("Cookie 说白了就是一个存储在浏览器里的一个小小的文本文件，它附着在 HTTP 请求上，在浏览器和服务器之间“飞来飞去”。它可以携带用户信息，当服务器检查 Cookie 的时候，便可以获取到客户端的状态。")]),t._v(" "),e("p",[t._v("如大家所见，"),e("strong",[t._v("Cookie 以键值对的形式存在")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"cookie的性能劣势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie的性能劣势","aria-hidden":"true"}},[t._v("#")]),t._v(" Cookie的性能劣势")]),t._v(" "),e("h4",{attrs:{id:"cookie-不够大"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-不够大","aria-hidden":"true"}},[t._v("#")]),t._v(" Cookie 不够大")]),t._v(" "),e("p",[t._v("大家知道，Cookie 是有体积上限的，它最大只能有 4KB。当 Cookie 超过 4KB 时，它将面临被裁切的命运。这样看来，Cookie 只能用来存取少量的信息。")]),t._v(" "),e("h4",{attrs:{id:"过量的-cookie-会带来巨大的性能浪费"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过量的-cookie-会带来巨大的性能浪费","aria-hidden":"true"}},[t._v("#")]),t._v(" 过量的 Cookie 会带来巨大的性能浪费")]),t._v(" "),e("p",[e("strong",[t._v("Cookie 是紧跟域名的")]),t._v("。我们通过响应头里的 Set-Cookie 指定要存储的 Cookie 值。默认情况下，domain 被设置为设置 Cookie 页面的主机名，我们也可以手动设置 domain 的值：")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{attrs:{class:"token header-name keyword"}},[t._v("Set-Cookie:")]),t._v(" name=xiuyan; domain=xiuyan.me\n")])])]),e("p",[e("strong",[t._v("同一个域名下的所有请求，都会携带 Cookie")]),t._v("。大家试想，如果我们此刻仅仅是请求一张图片或者一个 CSS 文件，我们也要携带一个 Cookie 跑来跑去（关键是 Cookie 里存储的信息我现在并不需要），这是一件多么劳民伤财的事情。Cookie 虽然小，请求却可以有很多，随着请求的叠加，这样的不必要的 Cookie 带来的开销将是无法想象的。")]),t._v(" "),e("h2",{attrs:{id:"web-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-storage","aria-hidden":"true"}},[t._v("#")]),t._v(" Web Storage")]),t._v(" "),e("p",[t._v("Web Storage 是 HTML5 专门为浏览器存储而提供的数据存储机制。它又分为 Local Storage 与 Session Storage。")]),t._v(" "),e("h3",{attrs:{id:"local-storage-与-session-storage-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#local-storage-与-session-storage-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" Local Storage 与 Session Storage 的区别")]),t._v(" "),e("p",[t._v("两者的区别在于"),e("strong",[t._v("生命周期")]),t._v("与"),e("strong",[t._v("作用域")]),t._v("的不同。")]),t._v(" "),e("ul",[e("li",[t._v("生命周期：Local Storage 是持久化的本地存储，存储在其中的数据是永远不会过期的，使其消失的唯一办法是手动删除；而 Session Storage 是临时性的本地存储，它是会话级别的存储，当会话结束（页面被关闭）时，存储内容也随之被释放。")]),t._v(" "),e("li",[t._v("作用域：Local Storage、Session Storage 和 Cookie 都遵循同源策略。但 Session Storage 特别的一点在于，即便是相同域名下的两个页面，只要它们"),e("strong",[t._v("不在同一个浏览器窗口中")]),t._v("打开，那么它们的 Session Storage 内容便无法共享。")])]),t._v(" "),e("h3",{attrs:{id:"web-storage-的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-storage-的特性","aria-hidden":"true"}},[t._v("#")]),t._v(" Web Storage 的特性")]),t._v(" "),e("ul",[e("li",[t._v("存储容量大： Web Storage 根据浏览器的不同，存储容量可以达到 5-10M 之间。")]),t._v(" "),e("li",[t._v("仅位于浏览器端，不与服务端发生通信。")])]),t._v(" "),e("p",[t._v("Web Storage 保存的数据内容和 Cookie 一样，是文本内容，以键值对的形式存在。Local Storage 与 Session Storage 在 API 方面无异，这里我们以 localStorage 为例：")]),t._v(" "),e("ul",[e("li",[t._v("存储数据：setItem()")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("localStorage"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("setItem")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'user_name'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v("'xiuyan'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("读取数据： getItem()")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("localStorage"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("getItem")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'user_name'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("删除某一键名对应的数据： removeItem()")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("localStorage"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("removeItem")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token string"}},[t._v("'user_name'")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("清空数据记录：clear()")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("localStorage"),e("span",{attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{attrs:{class:"token function"}},[t._v("clear")]),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景","aria-hidden":"true"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),e("h4",{attrs:{id:"local-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#local-storage","aria-hidden":"true"}},[t._v("#")]),t._v(" Local Storage")]),t._v(" "),e("p",[t._v("Local Storage 在存储方面没有什么特别的限制，理论上 Cookie 无法胜任的、可以用简单的键值对来存取的数据存储任务，都可以交给 Local Storage 来做。")]),t._v(" "),e("p",[t._v("这里给大家举个例子，考虑到 Local Storage 的特点之一是"),e("strong",[t._v("持久")]),t._v("，有时我们更倾向于用它来存储一些内容稳定的资源。比如图片内容丰富的电商网站会用它来存储 Base64 格式的图片字符串：")]),t._v(" "),e("p",[t._v("有的网站还会用它存储一些不经常更新的 CSS、JS 等静态资源。")]),t._v(" "),e("h4",{attrs:{id:"session-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session-storage","aria-hidden":"true"}},[t._v("#")]),t._v(" Session Storage")]),t._v(" "),e("p",[t._v("Session Storage 更适合用来存储生命周期和它同步的"),e("strong",[t._v("会话级别")]),t._v("的信息。这些信息只适用于当前会话，当你开启新的会话时，它也需要相应的更新或释放。比如微博的 Session Storage 就主要是存储你本次会话的浏览足迹：")]),t._v(" "),e("p",[t._v("lasturl 对应的就是你上一次访问的 URL 地址，这个地址是即时的。当你切换 URL 时，它随之更新，当你关闭页面时，留着它也确实没有什么意义了，干脆释放吧。这样的数据用 Session Storage 来处理再合适不过。")]),t._v(" "),e("h2",{attrs:{id:"终极形态：indexdb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#终极形态：indexdb","aria-hidden":"true"}},[t._v("#")]),t._v(" 终极形态：IndexDB")]),t._v(" "),e("p",[t._v("IndexDB 是一个"),e("strong",[t._v("运行在浏览器上的非关系型数据库")]),t._v("。既然是数据库了，那就不是 5M、10M 这样小打小闹级别了。理论上来说，IndexDB 是没有存储上限的（一般来说不会小于 250M）。它不仅可以存储字符串，还可以存储二进制数据。")]),t._v(" "),e("ol",[e("li",[t._v("打开/创建一个 IndexDB 数据库（当该数据库不存在时，open 方法会直接创建一个名为 xiaoceDB 新数据库）。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  // 后面的回调中，我们可以通过event.target.result拿到数据库实例\n  let db\n  // 参数1位数据库名，参数2为版本号\n  const request = window.indexedDB.open("xiaoceDB", 1)\n  // 使用IndexDB失败时的监听函数\n  request.onerror = function(event) {\n     console.log(\'无法使用IndexDB\')\n   }\n  // 成功\n  request.onsuccess  = function(event){\n    // 此处就可以获取到db实例\n    db = event.target.result\n    console.log("你打开了IndexDB")\n  }\n')])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("创建一个 object store（object store 对标到数据库中的“表”单位）。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// onupgradeneeded事件会在初始化数据库/版本发生更新时被调用，我们在它的监听函数中创建object store\nrequest.onupgradeneeded = function(event){\n  let objectStore\n  // 如果同名表未被创建过，则新建test表\n  if (!db.objectStoreNames.contains('test')) {\n    objectStore = db.createObjectStore('test', { keyPath: 'id' })\n  }\n}  \n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("构建一个事务来执行一些数据库操作，像增加或提取数据等。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  // 创建事务，指定表格名称和读写权限\n  const transaction = db.transaction(["test"],"readwrite")\n  // 拿到Object Store对象\n  const objectStore = transaction.objectStore("test")\n  // 向表格写入数据\n  objectStore.add({id: 1, name: \'xiuyan\'})\n')])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("通过监听正确类型的事件以等待操作完成。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  // 操作成功时的监听函数\n  transaction.oncomplete = function(event) {\n    console.log("操作成功")\n  }\n  // 操作失败时的监听函数\n  transaction.onerror = function(event) {\n    console.log("这里有一个Error")\n  }\n  \n')])])]),e("h3",{attrs:{id:"indexdb-的应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexdb-的应用场景","aria-hidden":"true"}},[t._v("#")]),t._v(" IndexDB 的应用场景")]),t._v(" "),e("p",[t._v("通过上面的示例大家可以看出，在 IndexDB 中，我们可以创建多个数据库，一个数据库中创建多张表，一张表中存储多条数据——这足以 hold 住复杂的结构性数据。IndexDB 可以看做是 LocalStorage 的一个升级，当数据的复杂度和规模上升到了 LocalStorage 无法解决的程度，我们毫无疑问可以请出 IndexDB 来帮忙。")])])}],!1,null,null,null);o.options.__file="webstorage.md";a.default=o.exports}}]);